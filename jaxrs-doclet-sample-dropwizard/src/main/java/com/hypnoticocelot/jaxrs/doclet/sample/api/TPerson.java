/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hypnoticocelot.jaxrs.doclet.sample.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TPerson implements org.apache.thrift.TBase<TPerson, TPerson._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPerson");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LEGACY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("legacyId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEGACY_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("legacyRef", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PERSON_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("personName", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("photoUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("creationDate", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPersonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPersonTupleSchemeFactory());
  }

  private String uid; // required
  private String legacyId; // required
  private String legacyRef; // required
  private TPersonName personName; // required
  private TLocation location; // required
  private String photoUrl; // required
  private long creationDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    LEGACY_ID((short)2, "legacyId"),
    LEGACY_REF((short)3, "legacyRef"),
    PERSON_NAME((short)4, "personName"),
    LOCATION((short)5, "location"),
    PHOTO_URL((short)6, "photoUrl"),
    CREATION_DATE((short)7, "creationDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // LEGACY_ID
          return LEGACY_ID;
        case 3: // LEGACY_REF
          return LEGACY_REF;
        case 4: // PERSON_NAME
          return PERSON_NAME;
        case 5: // LOCATION
          return LOCATION;
        case 6: // PHOTO_URL
          return PHOTO_URL;
        case 7: // CREATION_DATE
          return CREATION_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIONDATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UID")));
    tmpMap.put(_Fields.LEGACY_ID, new org.apache.thrift.meta_data.FieldMetaData("legacyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGACY_REF, new org.apache.thrift.meta_data.FieldMetaData("legacyRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON_NAME, new org.apache.thrift.meta_data.FieldMetaData("personName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPersonName.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLocation.class)));
    tmpMap.put(_Fields.PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("photoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("creationDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPerson.class, metaDataMap);
  }

  public TPerson() {
  }

  public TPerson(
          String uid,
          String legacyId,
          String legacyRef,
          TPersonName personName,
          TLocation location,
          String photoUrl,
          long creationDate)
  {
    this();
    this.uid = uid;
    this.legacyId = legacyId;
    this.legacyRef = legacyRef;
    this.personName = personName;
    this.location = location;
    this.photoUrl = photoUrl;
    this.creationDate = creationDate;
    setCreationDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPerson(TPerson other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetLegacyId()) {
      this.legacyId = other.legacyId;
    }
    if (other.isSetLegacyRef()) {
      this.legacyRef = other.legacyRef;
    }
    if (other.isSetPersonName()) {
      this.personName = new TPersonName(other.personName);
    }
    if (other.isSetLocation()) {
      this.location = new TLocation(other.location);
    }
    if (other.isSetPhotoUrl()) {
      this.photoUrl = other.photoUrl;
    }
    this.creationDate = other.creationDate;
  }

  public TPerson deepCopy() {
    return new TPerson(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.legacyId = null;
    this.legacyRef = null;
    this.personName = null;
    this.location = null;
    this.photoUrl = null;
    setCreationDateIsSet(false);
    this.creationDate = 0;
  }

  public String getUid() {
    return this.uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getLegacyId() {
    return this.legacyId;
  }

  public void setLegacyId(String legacyId) {
    this.legacyId = legacyId;
  }

  public void unsetLegacyId() {
    this.legacyId = null;
  }

  /** Returns true if field legacyId is set (has been assigned a value) and false otherwise */
  public boolean isSetLegacyId() {
    return this.legacyId != null;
  }

  public void setLegacyIdIsSet(boolean value) {
    if (!value) {
      this.legacyId = null;
    }
  }

  public String getLegacyRef() {
    return this.legacyRef;
  }

  public void setLegacyRef(String legacyRef) {
    this.legacyRef = legacyRef;
  }

  public void unsetLegacyRef() {
    this.legacyRef = null;
  }

  /** Returns true if field legacyRef is set (has been assigned a value) and false otherwise */
  public boolean isSetLegacyRef() {
    return this.legacyRef != null;
  }

  public void setLegacyRefIsSet(boolean value) {
    if (!value) {
      this.legacyRef = null;
    }
  }

  public TPersonName getPersonName() {
    return this.personName;
  }

  public void setPersonName(TPersonName personName) {
    this.personName = personName;
  }

  public void unsetPersonName() {
    this.personName = null;
  }

  /** Returns true if field personName is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonName() {
    return this.personName != null;
  }

  public void setPersonNameIsSet(boolean value) {
    if (!value) {
      this.personName = null;
    }
  }

  public TLocation getLocation() {
    return this.location;
  }

  public void setLocation(TLocation location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public String getPhotoUrl() {
    return this.photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }

  public void unsetPhotoUrl() {
    this.photoUrl = null;
  }

  /** Returns true if field photoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoUrl() {
    return this.photoUrl != null;
  }

  public void setPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.photoUrl = null;
    }
  }

  public long getCreationDate() {
    return this.creationDate;
  }

  public void setCreationDate(long creationDate) {
    this.creationDate = creationDate;
    setCreationDateIsSet(true);
  }

  public void unsetCreationDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONDATE_ISSET_ID);
  }

  /** Returns true if field creationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONDATE_ISSET_ID);
  }

  public void setCreationDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case LEGACY_ID:
      if (value == null) {
        unsetLegacyId();
      } else {
        setLegacyId((String)value);
      }
      break;

    case LEGACY_REF:
      if (value == null) {
        unsetLegacyRef();
      } else {
        setLegacyRef((String)value);
      }
      break;

    case PERSON_NAME:
      if (value == null) {
        unsetPersonName();
      } else {
        setPersonName((TPersonName)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((TLocation)value);
      }
      break;

    case PHOTO_URL:
      if (value == null) {
        unsetPhotoUrl();
      } else {
        setPhotoUrl((String)value);
      }
      break;

    case CREATION_DATE:
      if (value == null) {
        unsetCreationDate();
      } else {
        setCreationDate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case LEGACY_ID:
      return getLegacyId();

    case LEGACY_REF:
      return getLegacyRef();

    case PERSON_NAME:
      return getPersonName();

    case LOCATION:
      return getLocation();

    case PHOTO_URL:
      return getPhotoUrl();

    case CREATION_DATE:
      return Long.valueOf(getCreationDate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case LEGACY_ID:
      return isSetLegacyId();
    case LEGACY_REF:
      return isSetLegacyRef();
    case PERSON_NAME:
      return isSetPersonName();
    case LOCATION:
      return isSetLocation();
    case PHOTO_URL:
      return isSetPhotoUrl();
    case CREATION_DATE:
      return isSetCreationDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPerson)
      return this.equals((TPerson)that);
    return false;
  }

  public boolean equals(TPerson that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_legacyId = true && this.isSetLegacyId();
    boolean that_present_legacyId = true && that.isSetLegacyId();
    if (this_present_legacyId || that_present_legacyId) {
      if (!(this_present_legacyId && that_present_legacyId))
        return false;
      if (!this.legacyId.equals(that.legacyId))
        return false;
    }

    boolean this_present_legacyRef = true && this.isSetLegacyRef();
    boolean that_present_legacyRef = true && that.isSetLegacyRef();
    if (this_present_legacyRef || that_present_legacyRef) {
      if (!(this_present_legacyRef && that_present_legacyRef))
        return false;
      if (!this.legacyRef.equals(that.legacyRef))
        return false;
    }

    boolean this_present_personName = true && this.isSetPersonName();
    boolean that_present_personName = true && that.isSetPersonName();
    if (this_present_personName || that_present_personName) {
      if (!(this_present_personName && that_present_personName))
        return false;
      if (!this.personName.equals(that.personName))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_photoUrl = true && this.isSetPhotoUrl();
    boolean that_present_photoUrl = true && that.isSetPhotoUrl();
    if (this_present_photoUrl || that_present_photoUrl) {
      if (!(this_present_photoUrl && that_present_photoUrl))
        return false;
      if (!this.photoUrl.equals(that.photoUrl))
        return false;
    }

    boolean this_present_creationDate = true;
    boolean that_present_creationDate = true;
    if (this_present_creationDate || that_present_creationDate) {
      if (!(this_present_creationDate && that_present_creationDate))
        return false;
      if (this.creationDate != that.creationDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_uid = true && (isSetUid());
    builder.append(present_uid);
    if (present_uid)
      builder.append(uid);

    boolean present_legacyId = true && (isSetLegacyId());
    builder.append(present_legacyId);
    if (present_legacyId)
      builder.append(legacyId);

    boolean present_legacyRef = true && (isSetLegacyRef());
    builder.append(present_legacyRef);
    if (present_legacyRef)
      builder.append(legacyRef);

    boolean present_personName = true && (isSetPersonName());
    builder.append(present_personName);
    if (present_personName)
      builder.append(personName);

    boolean present_location = true && (isSetLocation());
    builder.append(present_location);
    if (present_location)
      builder.append(location);

    boolean present_photoUrl = true && (isSetPhotoUrl());
    builder.append(present_photoUrl);
    if (present_photoUrl)
      builder.append(photoUrl);

    boolean present_creationDate = true;
    builder.append(present_creationDate);
    if (present_creationDate)
      builder.append(creationDate);

    return builder.toHashCode();
  }

  public int compareTo(TPerson other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPerson typedOther = (TPerson)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegacyId()).compareTo(typedOther.isSetLegacyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegacyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legacyId, typedOther.legacyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegacyRef()).compareTo(typedOther.isSetLegacyRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegacyRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legacyRef, typedOther.legacyRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonName()).compareTo(typedOther.isSetPersonName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personName, typedOther.personName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoUrl()).compareTo(typedOther.isSetPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoUrl, typedOther.photoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationDate()).compareTo(typedOther.isSetCreationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationDate, typedOther.creationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPerson(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legacyId:");
    if (this.legacyId == null) {
      sb.append("null");
    } else {
      sb.append(this.legacyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legacyRef:");
    if (this.legacyRef == null) {
      sb.append("null");
    } else {
      sb.append(this.legacyRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personName:");
    if (this.personName == null) {
      sb.append("null");
    } else {
      sb.append(this.personName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photoUrl:");
    if (this.photoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.photoUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationDate:");
    sb.append(this.creationDate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (personName != null) {
      personName.validate();
    }
    if (location != null) {
      location.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPersonStandardSchemeFactory implements SchemeFactory {
    public TPersonStandardScheme getScheme() {
      return new TPersonStandardScheme();
    }
  }

  private static class TPersonStandardScheme extends StandardScheme<TPerson> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPerson struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEGACY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legacyId = iprot.readString();
              struct.setLegacyIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEGACY_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legacyRef = iprot.readString();
              struct.setLegacyRefIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PERSON_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.personName = new TPersonName();
              struct.personName.read(iprot);
              struct.setPersonNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new TLocation();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photoUrl = iprot.readString();
              struct.setPhotoUrlIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationDate = iprot.readI64();
              struct.setCreationDateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPerson struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.legacyId != null) {
        oprot.writeFieldBegin(LEGACY_ID_FIELD_DESC);
        oprot.writeString(struct.legacyId);
        oprot.writeFieldEnd();
      }
      if (struct.legacyRef != null) {
        oprot.writeFieldBegin(LEGACY_REF_FIELD_DESC);
        oprot.writeString(struct.legacyRef);
        oprot.writeFieldEnd();
      }
      if (struct.personName != null) {
        oprot.writeFieldBegin(PERSON_NAME_FIELD_DESC);
        struct.personName.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        struct.location.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.photoUrl != null) {
        oprot.writeFieldBegin(PHOTO_URL_FIELD_DESC);
        oprot.writeString(struct.photoUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATION_DATE_FIELD_DESC);
      oprot.writeI64(struct.creationDate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPersonTupleSchemeFactory implements SchemeFactory {
    public TPersonTupleScheme getScheme() {
      return new TPersonTupleScheme();
    }
  }

  private static class TPersonTupleScheme extends TupleScheme<TPerson> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPerson struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetLegacyId()) {
        optionals.set(1);
      }
      if (struct.isSetLegacyRef()) {
        optionals.set(2);
      }
      if (struct.isSetPersonName()) {
        optionals.set(3);
      }
      if (struct.isSetLocation()) {
        optionals.set(4);
      }
      if (struct.isSetPhotoUrl()) {
        optionals.set(5);
      }
      if (struct.isSetCreationDate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetLegacyId()) {
        oprot.writeString(struct.legacyId);
      }
      if (struct.isSetLegacyRef()) {
        oprot.writeString(struct.legacyRef);
      }
      if (struct.isSetPersonName()) {
        struct.personName.write(oprot);
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetPhotoUrl()) {
        oprot.writeString(struct.photoUrl);
      }
      if (struct.isSetCreationDate()) {
        oprot.writeI64(struct.creationDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPerson struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.legacyId = iprot.readString();
        struct.setLegacyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.legacyRef = iprot.readString();
        struct.setLegacyRefIsSet(true);
      }
      if (incoming.get(3)) {
        struct.personName = new TPersonName();
        struct.personName.read(iprot);
        struct.setPersonNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.location = new TLocation();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.photoUrl = iprot.readString();
        struct.setPhotoUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creationDate = iprot.readI64();
        struct.setCreationDateIsSet(true);
      }
    }
  }

}

